{"ast":null,"code":"var _jsxFileName = \"/Volumes/Study/CS/React JS/app/src/components/graphs/TaskShareGraph.js\";\nimport React from 'react';\nimport Highcharts from 'highcharts';\nimport crossfilter from 'crossfilter';\nimport Loading from '../utility/Loading';\nimport CustomRadio from '../utility/CustomRadio';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction TaskGraph() {\n  var chartData = [];\n\n  async function getData(url) {\n    const response = await fetch(url, {\n      method: 'GET'\n    });\n    return response.json();\n  }\n\n  const prepareData = function (data) {\n    let statusFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let cf = crossfilter(data);\n\n    if (statusFilter) {\n      cf.dimension(d => {\n        return d.status;\n      }).filter(statusFilter);\n    }\n\n    let analystDim = cf.dimension(d => {\n      return d.analyst;\n    });\n    let series = analystDim.group().reduceSum(d => {\n      return d.amount;\n    }).all(); // changing format of data to feed highchart\n\n    let seriesData = [];\n\n    for (let i = 0; i < series.length; i++) {\n      let obj = {\n        name: '',\n        y: 0\n      };\n      obj.name = series[i].key;\n      obj.y = series[i].value;\n      seriesData.push(obj);\n    }\n\n    return [{\n      name: 'Task Share',\n      data: seriesData\n    }];\n  };\n\n  const loadChart = () => {\n    var URL = 'http://apiforreact-env.eba-umuhetyq.ap-south-1.elasticbeanstalk.com/Admin/fetch-task-performance.php';\n    getData(URL).then(data => {\n      chartData = data.data;\n      data = prepareData(data.data);\n      document.getElementsByName('status1')[2].checked = true;\n      renderChart(data);\n    });\n  };\n\n  const updateChart = () => {\n    let status = document.getElementsByName('status1');\n    let statusFilter = '';\n\n    for (let i = 0; i < status.length; i++) {\n      if (status[i].checked) {\n        statusFilter = status[i].value;\n        break;\n      }\n    }\n\n    let data = prepareData(chartData, statusFilter);\n    renderChart(data);\n  };\n\n  const renderChart = data => {\n    // Build the chart\n    Highcharts.chart('graph-1', {\n      chart: {\n        plotBackgroundColor: null,\n        plotBorderWidth: null,\n        plotShadow: false,\n        type: 'pie'\n      },\n      title: {\n        text: 'Analyst task completion share'\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.y} <i class=\"fas fa-rupee-sign\"></i></b>'\n      },\n      accessibility: {\n        point: {\n          valueSuffix: '%'\n        }\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: true,\n          color: 'red',\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n            connectorColor: 'silver'\n          }\n        }\n      },\n      credits: {\n        enabled: false\n      },\n      series: data\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"graph-1\",\n      children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-block\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"customized-radio-black\",\n        children: [/*#__PURE__*/_jsxDEV(CustomRadio, {\n          value: \"Completed\",\n          text: \"Completed\",\n          name: \"status1\",\n          icon: \"fas fa-check\",\n          onclick: updateChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(CustomRadio, {\n          value: \"Pending\",\n          text: \"Pending\",\n          name: \"status1\",\n          icon: \"fas fa-box-open\",\n          onclick: updateChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CustomRadio, {\n          value: \"\",\n          text: \"Accumulated\",\n          name: \"status1\",\n          icon: \"fas fa-box\",\n          checked: true,\n          onclick: updateChart\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-row jc-e\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary btn-medium\",\n        onClick: loadChart,\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-sync\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 84\n        }, this), \" Refresh\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), loadChart()]\n  }, void 0, true);\n}\n\n_c = TaskGraph;\nexport default TaskGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskGraph\");","map":{"version":3,"sources":["/Volumes/Study/CS/React JS/app/src/components/graphs/TaskShareGraph.js"],"names":["React","Highcharts","crossfilter","Loading","CustomRadio","TaskGraph","chartData","getData","url","response","fetch","method","json","prepareData","data","statusFilter","cf","dimension","d","status","filter","analystDim","analyst","series","group","reduceSum","amount","all","seriesData","i","length","obj","name","y","key","value","push","loadChart","URL","then","document","getElementsByName","checked","renderChart","updateChart","chart","plotBackgroundColor","plotBorderWidth","plotShadow","type","title","text","tooltip","pointFormat","accessibility","point","valueSuffix","plotOptions","pie","allowPointSelect","color","cursor","dataLabels","enabled","format","connectorColor","credits"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Highcharts from 'highcharts';\nimport crossfilter from 'crossfilter';\nimport Loading from '../utility/Loading';\nimport CustomRadio from '../utility/CustomRadio';\n\nfunction TaskGraph() {\n\n    var chartData = [];\n\n    async function getData(url) {\n        const response = await fetch(url, {\n            method: 'GET'\n        });\n        return response.json(); \n    }\n\n    const prepareData = (data, statusFilter = '') => {\n        let cf = crossfilter(data);\n\n        if(statusFilter) {\n            cf.dimension((d) => {return d.status}).filter(statusFilter);\n        }\n\n        let analystDim = cf.dimension((d) => {return d.analyst});\n\n        let series = analystDim.group().reduceSum((d) => {return d.amount}).all();\n\n        // changing format of data to feed highchart\n        let seriesData = [];\n        for(let i=0; i<series.length; i++) {\n            let obj = {\n                name: '',\n                y: 0\n            };\n            obj.name = series[i].key;\n            obj.y = series[i].value;\n            seriesData.push(obj)\n        }\n\n        return [{\n            name: 'Task Share',\n            data: seriesData\n        }]\n    }\n\n    const loadChart = () => {\n        \n        var URL = 'http://apiforreact-env.eba-umuhetyq.ap-south-1.elasticbeanstalk.com/Admin/fetch-task-performance.php';\n\n        getData(URL)\n        .then(data => {\n            chartData = data.data;\n            data = prepareData(data.data);\n            document.getElementsByName('status1')[2].checked = true;\n            renderChart(data);\n            \n        });\n    }\n\n    \n    const updateChart = () => {\n        let status = document.getElementsByName('status1');\n        let statusFilter = '';\n        for(let i=0; i<status.length; i++) {\n            if(status[i].checked) { \n                statusFilter = status[i].value;\n                break;\n            }\n        }\n        let data = prepareData(chartData, statusFilter);\n        renderChart(data);\n    }\n\n    const renderChart = (data) => {\n\n        // Build the chart\n        Highcharts.chart('graph-1', {\n            chart: {\n                plotBackgroundColor: null,\n                plotBorderWidth: null,\n                plotShadow: false,\n                type: 'pie'\n            },\n            title: {\n                text: 'Analyst task completion share'\n            },\n            tooltip: {\n                pointFormat: '{series.name}: <b>{point.y} <i class=\"fas fa-rupee-sign\"></i></b>'\n            },\n            accessibility: {\n                point: {\n                    valueSuffix: '%'\n                }\n            },\n            plotOptions: {\n                pie: {\n                    allowPointSelect: true,\n                    color: 'red',\n                    cursor: 'pointer',\n                    dataLabels: {\n                        enabled: true,\n                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',\n                        connectorColor: 'silver'\n                    }\n                }\n            },\n            credits: {\n                enabled: false\n            },\n            series: data\n        });\n    }\n    return (\n        <>\n            <div id=\"graph-1\">\n                <Loading />\n            </div>\n            <div className='input-block'>\n                <div className='customized-radio-black'>\n                    \n                <CustomRadio \n                        value='Completed' \n                        text='Completed'\n                        name='status1'\n                        icon='fas fa-check'\n                        onclick={updateChart}\n                    />\n                    <CustomRadio \n                        value='Pending' \n                        text='Pending'\n                        name='status1'\n                        icon='fas fa-box-open'\n                        onclick={updateChart}\n                    />\n                    <CustomRadio \n                        value='' \n                        text='Accumulated'\n                        name='status1'\n                        icon='fas fa-box'\n                        checked={true}\n                        onclick={updateChart}\n                    />\n                </div> \n            </div>\n            <div className='flex-row jc-e'>\n                <button className='btn btn-primary btn-medium' onClick={loadChart}><i className='fas fa-sync'/> Refresh</button>\n            </div>\n            {loadChart()}\n        </>\n    )\n}\n\nexport default TaskGraph\n"]},"metadata":{},"sourceType":"module"}